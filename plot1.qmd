---
title: "Plot1"
format: html
---

```{python}
import pandas as pd
import altair as alt
from vega_datasets import data
import json
# Load US states/divisions topology
states = alt.topo_feature(data.us_10m.url, 'states')
# Read the CSV file
df = pd.read_excel(r"C:\Users\clari\OneDrive\Documents\Python II\final_project\HC_11.1_with_PV_data.xlsx")
```

```{python}
# Example dataset
data_dict = {
    "region": ["Northeast", "Midwest", "South", "West"],
    "any_household_energy_insecurity": [3.69, 3.25, 4.66, 2.98],
    "total_cap_dc_region": [639.3, 687.3, 9848.64, 4006.8]
}

df = pd.DataFrame(data_dict)

# State-to-region mapping (FIPS codes based on U.S. GeoJSON)
state_region_mapping = {
    23: 'Northeast', 25: 'Northeast', 33: 'Northeast', 44: 'Northeast', 50: 'Northeast', 9: 'Northeast',
    34: 'Northeast', 36: 'Northeast', 42: 'Northeast',
    17: 'Midwest', 18: 'Midwest', 26: 'Midwest', 39: 'Midwest', 55: 'Midwest',
    19: 'Midwest', 20: 'Midwest', 27: 'Midwest', 29: 'Midwest', 31: 'Midwest', 38: 'Midwest', 46: 'Midwest',
    1: 'South', 5: 'South', 10: 'South', 12: 'South', 13: 'South', 21: 'South', 22: 'South', 24: 'South',
    28: 'South', 37: 'South', 40: 'South', 45: 'South', 47: 'South', 48: 'South', 51: 'South', 54: 'South',
    4: 'West', 8: 'West', 16: 'West', 30: 'West', 32: 'West', 35: 'West', 49: 'West', 56: 'West',
    2: 'West', 6: 'West', 15: 'West', 41: 'West', 53: 'West'
}

# Prepare state-to-region DataFrame
region_data = pd.DataFrame([
    {"id": fips, "region": region} for fips, region in state_region_mapping.items()
])

# Load US states GeoJSON
states = alt.topo_feature(data.us_10m.url, "states")
```


```{python}
# Updated chart with a descriptive title
region_map = alt.Chart(states).mark_geoshape().transform_lookup(
    lookup='id',
    from_=alt.LookupData(region_data, key='id', fields=['region'])
).transform_lookup(
    lookup='region',
    from_=alt.LookupData(df, key='region', fields=[
                         'any_household_energy_insecurity', 'total_cap_dc_region'])
).encode(
    color=alt.Color(
        'any_household_energy_insecurity:Q',
        scale=alt.Scale(scheme="reds"),
        title="Energy Insecurity (Millions of housing units)",
        legend=alt.Legend(
            labelFontSize=10,
            titleFontSize=12,
            orient="right",
            direction="vertical",
            titleLimit=300
        )
    ),
    tooltip=[
        alt.Tooltip('region:N', title="Region"),
        alt.Tooltip('any_household_energy_insecurity:Q',
                    title="Energy Insecurity (Millions of housing units)", format=".2f"),
        alt.Tooltip('total_cap_dc_region:Q', title="DC Capacity", format=".1f")
    ]
).project(
    type='albersUsa'
).properties(
    width=800,
    height=500,
    title={
        "text": "Energy Insecurity and DC Capacity Across US Regions",
        "fontSize": 16,
        "fontWeight": "bold",
        "anchor": "middle",  # Center the title
        "dy": -10            # Adjust the vertical position of the title
    }
)

# Manually specify approximate region centroids (Longitude, Latitude)
region_centroids = {
    "Northeast": {"lon": -73, "lat": 43},   # Northeast
    "Midwest": {"lon": -90, "lat": 41},     # Midwest
    "South": {"lon": -86, "lat": 34},       # South
    "West": {"lon": -115, "lat": 38}        # West
}

# Convert centroids to a DataFrame
centroids_df = pd.DataFrame([{"region": region, "lon": coords["lon"],
                            "lat": coords["lat"]} for region, coords in region_centroids.items()])

# Merge centroids with the existing dataset
df_with_centroids = pd.merge(df, centroids_df, on="region", how="left")

# Add Region Labels to the Map
region_labels = alt.Chart(df_with_centroids).mark_text(
    fontSize=12,
    fontWeight="bold",
    color="white",
    align="center"
).encode(
    longitude='lon:Q',
    latitude='lat:Q',
    text='region:N'
)

# Combine the Base Map and Region Labels without including conflicting config attributes
final_chart = region_map + region_labels

# Display the chart
final_chart.display()

```


```{python}
final_chart.save("plot1.png", format="png")
```